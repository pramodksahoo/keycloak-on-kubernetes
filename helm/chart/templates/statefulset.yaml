apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: keycloak
spec:
  replicas: {{ .Values.statefulSet.minReplicas }}
  serviceName: keycloak-discovery
  selector:
    matchLabels:
      com.bhn.service: keycloak
  template:
    metadata:
      name: keycloak-template
      labels:
        com.bhn.service: keycloak
    spec:
      restartPolicy: Always
      serviceAccountName: identity
      containers:
        - image: {{ .Values.container.image.repo }}:{{ .Values.image.tag }}
          imagePullPolicy: Always
          name: keycloak
          volumeMounts:
            - name: cache-owners
              subPath: cache-owners.cli
              mountPath: /opt/jboss/startup-scripts/cache-owners.cli
          env:
            - name: KEYCLOAK_ADMIN_PASSWORD
              value: change_me
            - name: KEYCLOAK_ADMIN
              value: admin
            - name: PROXY_ADDRESS_FORWARDING
              value: 'true'
            - name: CACHE_OWNERS
              value: "2"
            - name: KEYCLOAK_STATISTICS
              value: "all"
            - name: KC_LOG_CONSOLE_OUTPUT
              value: json
            - name: KUBERNETES_LABELS
              value: app=keycloak
            - name: KUBERNETES_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
            - name: SQS_PERSON_MANAGEMENT_SYNCH
              value: "{{ .Values.personsManagementQueue }}"
            - name: USER_MANAGEMENT_URL
              value: "{{ .Values.userManagementURL }}"
            - name: EMAIL_NOTIFICATION_QUEUE
              value: "{{ .Values.emailNotificationQueue }}"
            - name: PERSON_IDENTITY_SYNC_QUEUE
              value: "{{ .Values.personIdentitySyncQueue }}"
            # - name: JGROUPS_DISCOVERY_PROTOCOL
            #   value: kubernetes.KUBE_PING
            - name: JGROUPS_DISCOVERY_PROTOCOL
              value: dns.DNS_PING
            # - name: JGROUPS_DISCOVERY_PROPERTIES
            #   value: "namespace=$(KUBERNETES_NAMESPACE)"
            - name: KC_CACHE_CONFIG_FILE
              value: cache-ispn.xml
            - name: PERSON_UPDATE_ROLE
              value: "{{ .Values.PERSON_UPDATE_ROLE}}"
            - name: POD_NAME
              valueFrom:
                fieldRef:
                  apiVersion: v1
                  fieldPath: metadata.name
#            - name: JAVA_TOOL_OPTIONS
#              value: "-javaagent:/tmp/newrelic/newrelic-agent.jar"
            - name: JVM_OPTS
              value: "{{ .Values.JVM_OPTS.mem }}"
            - name: JAVA_OPTS
              value: >-
                -server
                -Djava.net.preferIPv4Stack=true
                -Djava.awt.headless=true
                -Djboss.default.jgroups.stack=kubernetes
                -Djboss.node.name=$(POD_NAME)
                -Djboss.tx.node.id=$(POD_NAME)
                -Djboss.site.name=$(KUBERNETES_NAMESPACE)
                -javaagent:/opt/newrelic/newrelic.jar
#                -Dnewrelic.config.license_key={{.Values.newRelicLicenceKey}}
#                -Dnewrelic.config.app_name={{.Values.newRelicAppName}}
            - name: JAVA_OPTS_APPEND
              value: "-Djgroups.dns.query=keycloak-discovery"
            # - name: DB_VENDOR
            #   value: "{{ .Values.keycloak.keycloakDB }}"
            - name: KC_CACHE_STACK
              value: "kubernetes"
            - name: KC_DB
              value: "mysql"
            # - name: KC_DB_URL_DATABASE
            #   value: "keycloak"
            # - name: KC_DB_SCHEMA
            #   value: "keycloak"
            - name: KC_DB_PASSWORD
              value: "{{ .Values.keycloak.keycloakPassword }}"
            - name: KC_DB_POOL_MAX_SIZE
              value: "{{ .Values.keycloak.keycloakMaxPoolSize }}"
            - name: KC_DB_POOL_MIN_SIZE
              value: "{{ .Values.keycloak.keycloakMinPoolSize }}"
            # - name: KC_DB_URL_PORT
            #   value: "{{ .Values.keycloak.keycloakDBPort }}"
            - name: KC_DB_USERNAME
              value: "{{ .Values.keycloak.keycloakDBUser }}"
            # - name: KC_DB_URL_HOST
            #   value: "{{ .Values.keycloak.keycloakDBHost }}"
            - name: KC_DB_URL
              value: "{{ .Values.keycloak.keycloakDBURL }}"  
            # - name: KEYCLOAK_LOGLEVEL
            #   value: "DEBUG"
            # - name: KC_LOG_LEVEL
            #   value: "DEBUG"
            # - name: ROOT_LOGLEVEL
            #   value: "DEBUG"
            # - name: PROXY_ADDRESS_FORWARDING
            #   value: "true"
            - name: JGROUPS_DISCOVERY_PROPERTIES
              value: "dns_query=keycloak-discovery"
            - name: KC_PROXY
              value: "passthrough"
            - name: EMC_URL
              value: "{{.Values.keycloak.emcUrl}}"
            - name: CERT_PASSPHRASE
              value: "{{.Values.keycloak.certPassPhrase}}"
            - name: CERT_FILE
              value: "{{.Values.keycloak.certFileName}}"
            - name: Environment
              value: "{{.Values.Environment }}"
            - name: NEW_RELIC_LICENSE_KEY
              value: "{{ .Values.newRelicLicenceKey }}"
            - name: NEW_RELIC_APP_NAME
              value: "{{ .Values.newRelicAppName }}"
            - name: AWS_REGION
              value: "{{ .Values.aws_region }}"

          resources:
            requests:
              memory: {{ .Values.container.resources.requests.memory }}
              cpu: {{ .Values.container.resources.requests.cpu }}
            limits:
              memory: {{ .Values.container.resources.limits.memory }}
              cpu: {{ .Values.container.resources.limits.cpu }}
          #https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/
          livenessProbe:
            failureThreshold: 3
            httpGet:
              httpHeaders:
              - name: Host
                value: KubernetesLivenessProbe
              path: health/live
              port: 8443
              scheme: HTTPS
            initialDelaySeconds: 150
            periodSeconds: 30
            successThreshold: 1
            timeoutSeconds: 10
          readinessProbe:
            failureThreshold: 3
            httpGet:
              httpHeaders:
              - name: Host
                value: KubernetesReadinessProbe
              path: health/ready
              port: 8443
              scheme: HTTPS
            initialDelaySeconds: 150
            periodSeconds: 30
            successThreshold: 1
            timeoutSeconds: 10
          ports:
            - name: http
              containerPort: {{ .Values.container.http.port }}
              protocol: TCP
            - name: https
              containerPort: {{ .Values.container.https.port }}
              protocol: TCP              
            - name: metrics
              containerPort: 9990
      volumes:
        - name: cache-owners
          configMap:
            name: cache-owners
